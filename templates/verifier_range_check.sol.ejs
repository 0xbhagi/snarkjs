// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/


pragma solidity >=0.7.0 <0.9.0;

contract RangeCheckPlonkVerifier {

    <% let domainSize = 2**CG[0].power %>

    uint32 constant n =   <%=domainSize%>;
    uint16 constant nLagrange = <%=domainSize%>;

    uint256 constant X2x1 = <%=X_2[0][0]%>;
    uint256 constant X2x2 = <%=X_2[0][1]%>;
    uint256 constant X2y1 = <%=X_2[1][0]%>;
    uint256 constant X2y2 = <%=X_2[1][1]%>;

    uint256 constant q = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 constant qf = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
    uint256 constant w1 = <%=w%>;

    uint256 constant G1x = 1;
    uint256 constant G1y = 2;
    uint256 constant G2x1 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant G2x2 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant G2y1 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant G2y2 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;

    // Proof polynomials
    uint16 constant pF      = 32;
    uint16 constant pLT     = 96;
    uint16 constant pH1     = 160;
    uint16 constant pH2     = 224;
    uint16 constant pZ      = 288;
    uint16 constant pWxi    = 352;
    uint16 constant pWxiw   = 416;
    <% for (let i=0; i < CG[0].c; i++) { %>
    uint16 constant pQ<%=i%>= <%=416 + (i+1)*64%>;
    <% } %>

    <% let lastMemPol = 416 + CG[0].c*64 %>
    // Proof Evaluations
    uint16 constant pEvalF  = <%=lastMemPol + 64%>;
    uint16 constant pEvalLT = <%=lastMemPol + 64 + 32%>;
    uint16 constant pEvalH1 = <%=lastMemPol + 64 + 32 * 2%>;
    uint16 constant pEvalH2 = <%=lastMemPol + 64 + 32 * 3%>;
    uint16 constant pEvalZw = <%=lastMemPol + 64 + 32 * 4%>;
    uint16 constant pEvalH1w= <%=lastMemPol + 64 + 32 * 5%>;
    uint16 constant pEvalR  = <%=lastMemPol + 64 + 32 * 6%>;

    // Challenges
    uint16 constant pGamma  = 0;
    uint16 constant pAlpha  = 32;
    uint16 constant pXi     = 64;
    uint16 constant pXin    = 96;
    uint16 constant pV0     = 128;
    uint16 constant pV1     = 160;
    uint16 constant pV2     = 192;
    uint16 constant pV3     = 224;
    uint16 constant pV4     = 256;
    uint16 constant pVp     = 288;
    uint16 constant pU      = 320;
    uint16 constant pOmegaN = 352;

    //Computed
    uint16 constant pZh     = 384;
    uint16 constant pZhInv  = 416;
    uint16 constant pEvalR0 = 448;
    uint16 constant pEvalL1 = 480;
    uint16 constant pEvalLN = 512;
    uint16 constant pA1     = 544;
    uint16 constant pB1     = 608;


    <% let pLastMem = 608 + 64 %>
    uint16 constant lastMem = <%=pLastMem%>;

    function verifyProof(bytes memory proof) public view returns (bool) {
        assembly {
            /////////
            // Computes the inverse using the extended euclidean algorithm
            /////////
            function inverse(a, q) -> inv {
                let t := 0
                let newt := 1
                let r := q
                let newr := a
                let quotient
                let aux

                for { } newr { } {
                    quotient := sdiv(r, newr)
                    aux := sub(t, mul(quotient, newt))
                    t:= newt
                    newt:= aux

                    aux := sub(r,mul(quotient, newr))
                    r := newr
                    newr := aux
                }

                if gt(r, 1) { revert(0,0) }
                if slt(t, 0) { t:= add(t, q) }

                inv := t
            }

            ///////
            // Computes the inverse of an array of values
            // See https://vitalik.ca/general/2018/07/21/starks_part_3.html in section where explain fields operations
            //////
            function inverseArray(pVals, n) {

                let pAux := mload(0x40)     // Point to the next free position
                let pIn := pVals
                let lastPIn := add(pVals, mul(n, 32))  // Read n elemnts
                let acc := mload(pIn)       // Read the first element
                pIn := add(pIn, 32)         // Point to the second element
                let inv


                for { } lt(pIn, lastPIn) {
                    pAux := add(pAux, 32)
                    pIn := add(pIn, 32)
                }
                {
                    mstore(pAux, acc)
                    acc := mulmod(acc, mload(pIn), q)
                }
                acc := inverse(acc, q)

                // At this point pAux pint to the next free position we substract 1 to point to the last used
                pAux := sub(pAux, 32)
                // pIn points to the n+1 element, we substract to point to n
                pIn := sub(pIn, 32)
                lastPIn := pVals  // We don't process the first element
                for { } gt(pIn, lastPIn) {
                    pAux := sub(pAux, 32)
                    pIn := sub(pIn, 32)
                }
                {
                    inv := mulmod(acc, mload(pAux), q)
                    acc := mulmod(acc, mload(pIn), q)
                    mstore(pIn, inv)
                }
                // pIn points to first element, we just set it.
                mstore(pIn, acc)
            }

            function checkField(v) {
                if iszero(lt(v, q)) {
                    mstore(0, 0)
                    return(0,0x20)
                }
            }

            function checkInput(pProof) {
                if iszero(eq(mload(pProof), <%=lastMemPol + 64 + 32 * 6%> )) {
                    mstore(0, 0)
                    return(0,0x20)
                }
                checkField(mload(add(pProof, pEvalF)))
                checkField(mload(add(pProof, pEvalLT)))
                checkField(mload(add(pProof, pEvalH1)))
                checkField(mload(add(pProof, pEvalH2)))
                checkField(mload(add(pProof, pEvalZw)))
                checkField(mload(add(pProof, pEvalH1w)))
                checkField(mload(add(pProof, pEvalR)))

                // Points are checked in the point operations precompiled smart contracts
            }

            function computeChallenges(pProof, pMem) {
                let a
                let b

                // challenges.gamma
                mstore( add(pMem, <%= pLastMem  %> )     , mload( add( pProof, pF)))
                mstore( add(pMem, <%= pLastMem + 32 %> ) , mload( add( pProof, add(pF,32))))
                mstore( add(pMem, <%= pLastMem + 64 %> ) , mload( add( pProof, add(pF,64))))
                mstore( add(pMem, <%= pLastMem + 96 %> ) , mload( add( pProof, add(pF,96))))
                mstore( add(pMem, <%= pLastMem + 128 %> ), mload( add( pProof, add(pF,128))))
                mstore( add(pMem, <%= pLastMem + 160 %> ), mload( add( pProof, add(pF,160))))

                b := mod(keccak256(add(pMem, lastMem), 192), q)
                mstore( add(pMem, pGamma), b)

                // challenges.alpha
                mstore( add(pMem, pAlpha), mod(keccak256(add(pProof, pZ), 64), q))

                // challenges.xi
                a := mod(keccak256(add(pProof, pQ0), <%=CG[0].c * 64%>), q)
                mstore( add(pMem, pXi), a)

                // challenges.xin
                <% for (let i = 0; i < power; i++) { %>
                    a:= mulmod(a, a, q)
                <% } %>
                mstore( add(pMem, pXin), a)

                // Zh & ZhInv
                a:= mod(add(sub(a, 1),q), q)
                mstore( add(pMem, pZh), a)
                mstore( add(pMem, pZhInv), a)  // We will invert later together with lagrange pols

                // challenges.v[0..4]
                let v0 := mod(keccak256(add(pProof, pEvalF), 192), q)
                mstore( add(pMem, pV0), v0)
                a := mulmod(v0, v0, q)
                mstore( add(pMem, pV1), a)
                a := mulmod(a, v0, q)
                mstore( add(pMem, pV2), a)
                a := mulmod(a, v0, q)
                mstore( add(pMem, pV3), a)
                a := mulmod(a, v0, q)
                mstore( add(pMem, pV4), a)

                // challenges.vp
                mstore( add(pMem, pVp), mod(keccak256(add(pMem, pV0), 32), q))

                // challenges.u
                mstore( add(pMem, pU), mod(keccak256(add(pProof, pWxi), 128), q))

                // omegaN
                let w := 1
                <% for (let i = 1; i < domainSize ; i++) { %>
                    w := mulmod(w, w1, q)
                <% } %>
            }

            function computeLagrange(pMem) {
                let omega1 := 1
                let omegaN := mload(add(pMem, pOmegaN))

                mstore(add(pMem, pEvalL1),
                    mulmod(n, mod(add(sub(mload(add(pMem, pXi)), omega1), q), q), q))

                mstore(add(pMem, pEvalLN),
                    mulmod(n, mod(add(sub(mload(add(pMem, pXi)), omegaN), q), q), q))

                inverseArray(add(pMem, pZhInv), <%=domainSize+1%> )

                let zh := mload(add(pMem, pZh))

                mstore(add(pMem, pEvalL1 ), mulmod(mload(add(pMem, pEvalL1 )), zh, q))

                mstore(add(pMem, pEvalLN),
                            mulmod(omegaN, mulmod(mload(add(pMem, pEvalLN)), zh, q), q))
            }

            function computeR0(pProof, pMem) {
                let elA0 := addmod(mload(add(pProof, pEvalH1)), mload(add(pMem, pGamma)), q)
                let elA1 := addmod(mload(add(pProof, pEvalH2)), mload(add(pMem, pGamma)), q)
                let elA  := mulmod(elA0, elA1, q)
                elA  := mulmod(elA, mload(add(pProof, pEvalZw)), q)

                let elB := mulmod(mload(add(pMem, pEvalL1)), mload(add(pMem, pAlpha)), q)

                let elC := mulmod(mload(add(pMem, pEvalL1)), mload(add(pProof, pEvalH1)), q)
                elC := mulmod(elC, mload(add(pMem, pAlpha)), q)
                elC := mulmod(elC, mload(add(pMem, pAlpha)), q)

                let elD := mod(sub(mload(add(pProof, pEvalH2)), <%=CG[0].maxRange%>), q)
                elD := mulmod(elD, mload(add(pMem, pEvalLN)), q)
                elD := mulmod(elD, mload(add(pMem, pAlpha)),  q)
                elD := mulmod(elD, mload(add(pMem, pAlpha)),  q)
                elD := mulmod(elD, mload(add(pMem, pAlpha)),  q)

                let elE := mod(sub(mload(add(pProof, pEvalH2)), mload(add(pProof, pEvalH1))), q)
                elE := getResultPolP(elE)
                elE := mulmod(elE, mload(add(pMem, pAlpha)),  q)
                elE := mulmod(elE, mload(add(pMem, pAlpha)),  q)
                elE := mulmod(elE, mload(add(pMem, pAlpha)),  q)
                elE := mulmod(elE, mload(add(pMem, pAlpha)),  q)

                let elF0 := mod(sub(mload(add(pMem, pXi)), mload(add(pMem, pOmegaN))), q)
                let elF1 := getResultPolP(mod(sub(mload(add(pProof, pEvalH1w)), mload(add(pProof, pEvalH2))), q))
                let elF  := mulmod(elF0, elF1, q)
                elF  := mulmod(elF, mload(add(pMem, pAlpha)),  q)
                elF  := mulmod(elF, mload(add(pMem, pAlpha)),  q)
                elF  := mulmod(elF, mload(add(pMem, pAlpha)),  q)
                elF  := mulmod(elF, mload(add(pMem, pAlpha)),  q)
                elF  := mulmod(elF, mload(add(pMem, pAlpha)),  q)


                let r0 := mload(add(pProof, pEvalR))
                r0 := mod(sub(r0, elA), q)
                r0 := mod(sub(r0, elB), q)
                r0 := addmod(r0, elC, q)
                r0 := addmod(r0, elD, q)
                r0 := addmod(r0, elE, q)
                r0 := addmod(r0, elF, q)

                r0 := mulmod(r0, mload(add(pMem, pZhInv)), q)

                mstore(add(pMem, pEvalR0) , r0)
            }

            function g1_set(pR, pP) {
                mstore(pR, mload(pP))
                mstore(add(pR, 32), mload(add(pP,32)))
            }

            function g1_acc(pR, pP) {
                let mIn := mload(0x40)
                mstore(mIn, mload(pR))
                mstore(add(mIn,32), mload(add(pR, 32)))
                mstore(add(mIn,64), mload(pP))
                mstore(add(mIn,96), mload(add(pP, 32)))

                let success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0,0x20)
                }
            }

            function g1_mulAcc(pR, pP, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, mload(pP))
                mstore(add(mIn,32), mload(add(pP, 32)))
                mstore(add(mIn,64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0,0x20)
                }

                mstore(add(mIn,64), mload(pR))
                mstore(add(mIn,96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0,0x20)
                }

            }

            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn,32), y)
                mstore(add(mIn,64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0,0x20)
                }

                mstore(add(mIn,64), mload(pR))
                mstore(add(mIn,96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0,0x20)
                }
            }

            function g1_mulSetC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn,32), y)
                mstore(add(mIn,64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0,0x20)
                }
            }

            function getResultPolP(val) -> res {
                let current

                res := val
                <% for (let i = 1; i <= CG[0].c; i++) {%>
                current := mod(sub(val, <%=i%>), q)
                res := mulmod(res, current, q)
                <%}%>
            }


            function computeA1(pProof, pMem) {
                let p := add(pMem, pA1)
                g1_set(p, add(pProof, pWxi))
                g1_mulAcc(p, add(pProof, pWxiw), mload(add(pMem, pU)))
            }


            function computeB1(pProof, pMem) {
                let p := add(pMem, pB1)

                // **** computeD ***************************

                // IDENTITY A
                let elA0 := addmod(mload(add(pMem, pGamma)), mload(add(pProof, pEvalF)), q)
                let elA1 := addmod(mload(add(pMem, pGamma)), mload(add(pProof, pEvalLT)), q)
                let elA := mulmod(elA0, elA1, q)
                elA := mulmod(elA,  mload(add(pMem, pV0)), q)
                elA := mulmod(elA,  mload(add(pMem, pU)), q)
                g1_mulAcc(p, add(pProof, pZ), elA)

                // IDENTITY B
                let elB := mulmod(mload(add(pMem, pEvalL1)), mload(add(pMem, pV0)), q)
                elB := mulmod(elB, mload(add(pMem, pAlpha)), q)
                g1_mulAcc(p, add(pProof, pZ), elB)


                // **** computeF ***************************

                // Add Q_0, Q_1, ..., Q_n polynomials
                g1_acc(p ,add(pProof, pQ0))

                let xinAdd2 := mload(add(pMem, pXin))
                xinAdd2 := mulmod(xinAdd2, mload(add(pMem, pXi)),  q)
                xinAdd2 := mulmod(xinAdd2, mload(add(pMem, pXi)),  q)
                let xinTotal := xinAdd2
                <% for (let i=1; i < CG[0].c; i++) { %>
                    let Q<%=i%>
                    g1_mulAcc(Q<%=i%>, add(pProof, pQ<%=i%>), mulmod(xinTotal, mload(add(pMem, pXi)), q))
                    g1_acc(p , Q<%=i%>)
                    xinTotal := mulmod(xinTotal, xinAdd2, q)
                <% } %>

                g1_mulAcc(p, add(pProof, pF), mload(add(pMem, pV1)))
                g1_mulAcc(p, add(pProof, pLT), mload(add(pMem, pV2)))
                g1_mulAcc(p, add(pProof, pH1), mload(add(pMem, pV3)))
                g1_mulAcc(p, add(pProof, pH2), mload(add(pMem, pV4)))
                g1_mulAcc(p, add(pProof, pH1), mulmod(mload(add(pMem, pVp)), mload(add(pMem, pU)), q))


                // **** computeE ***************************

                let s := mload(add(pMem, pEvalR0))
                s := addmod(s, mulmod(mload(add(pProof, pEvalR)),  mload(add(pMem, pV0)), q), q)
                s := addmod(s, mulmod(mload(add(pProof, pEvalF)),  mload(add(pMem, pV1)), q), q)
                s := addmod(s, mulmod(mload(add(pProof, pEvalLT)), mload(add(pMem, pV2)), q), q)
                s := addmod(s, mulmod(mload(add(pProof, pEvalH1)), mload(add(pMem, pV3)), q), q)
                s := addmod(s, mulmod(mload(add(pProof, pEvalH2)), mload(add(pMem, pV4)), q), q)

                let partial := mulmod(mload(add(pMem, pVp)), mload(add(pProof, pEvalH1w)), q)
                partial := addmod(mload(add(pProof, pEvalZw)), partial, q)
                s := addmod(s, mulmod(mload(add(pMem, pU)), partial, q), q)

                s := mod(sub(q, s), q)

                g1_mulAccC(p, G1x, G1y, s)


                // Last part of B
                s := mload(add(pMem, pXi))
                g1_mulAcc(p, add(pProof, pWxi), s)

                s := mulmod(mload(add(pMem, pU)), mload(add(pMem, pXi)), q)
                s := mulmod(s, w1, q)
                g1_mulAcc(p, add(pProof, pWxiw), s)
            }

            function checkPairing(pMem) -> isOk {
                let mIn := mload(0x40)
                mstore(mIn, mload(add(pMem, pA1)))
                mstore(add(mIn,32), mload(add(add(pMem, pA1), 32)))
                mstore(add(mIn,64), X2x2)
                mstore(add(mIn,96), X2x1)
                mstore(add(mIn,128), X2y2)
                mstore(add(mIn,160), X2y1)
                mstore(add(mIn,192), mload(add(pMem, pB1)))
                let s := mload(add(add(pMem, pB1), 32))
                s := mod(sub(qf, s), qf)
                mstore(add(mIn,224), s)
                mstore(add(mIn,256), G2x2)
                mstore(add(mIn,288), G2x1)
                mstore(add(mIn,320), G2y2)
                mstore(add(mIn,352), G2y1)

                let success := staticcall(sub(gas(), 2000), 8, mIn, 384, mIn, 0x20)

                isOk := and(success, mload(mIn))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, lastMem))

            checkInput(proof)
            computeChallenges(proof, pMem)
            computeLagrange(pMem)
            computeR0(proof, pMem)

            computeA1(proof, pMem)
            computeB1(proof, pMem)
            let isValid := checkPairing(pMem)

            mstore(0x40, sub(pMem, lastMem))
            mstore(0, isValid)
            return(0,0x20)
        }

    }
}
